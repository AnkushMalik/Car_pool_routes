extends layout

block content
  h1= title
  h2 Enter passengers locations:
  | Starting point:
  br
  input#startingpoint(type='text', placeholder= 'initial position')
  button#voicecmdsp(style='display:inline') rec
  button(style='display:inline' onclick="$('#startingpoint').val('')") del
  br
  | Pickup Locations:
  br
  input#pickuplocs(type='text', name='locations', placeholder='seprated by comma')
  button#voicecmdpl(style='display:inline') rec
  button(style='display:inline' onclick="$('#pickuplocs').val('')") del
  br
  button#showmap(onclick='pathRenderer()') submit
  #googleMap(style='width:100%;height:400px;')
  br
  br
  button#showhistory(style='padding : 10px;border-radius:2rem;') Pool Log
  br
  div#poollog(style='display:none;')
    h1 Pool History:
    ul
  

  script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js')
  script(src='https://maps.googleapis.com/maps/api/js?key=AIzaSyCbzQj2T_M20q6VX7w64q0ZyzO-qKRrj7k&sensor=false')
  script(src='https://www.gstatic.com/firebasejs/5.8.3/firebase.js')
  script.
    var config = {
      apiKey: "AIzaSyA3BvZmDpZE_-0ePxYS91nbhRcCclAnZoI",
      authDomain: "uberpoolpath2.firebaseapp.com",
      databaseURL: "https://uberpoolpath2.firebaseio.com",
      projectId: "uberpoolpath2",
      storageBucket: "uberpoolpath2.appspot.com",
      messagingSenderId: "251572063372"
    };
    firebase.initializeApp(config);
    let firebaseRef = firebase.database();
    let locs
    let startloc
    let endloc
    let sortedlocs
    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    let transcript 
    const recognition = new SpeechRecognition();
    recognition.interimResults = true;
    recognition.lang = 'en-US';

    $('#voicecmdsp').click(function(){  //google chrome 33+ required 
      recognition.start();
      recognition.addEventListener('result', e => {
        transcript = Array.from(e.results)
          .map(result => result[0]).map(result => result.transcript).join('');
          console.log(transcript);
      });
      recognition.addEventListener('end',function(){
        $('#startingpoint').val(transcript);
      });
    });

    $('#voicecmdpl').click(function(){
      recognition.start();
      recognition.addEventListener('result', e => {
        transcript = Array.from(e.results)
          .map(result => result[0]).map(result => result.transcript).join('');
          console.log(transcript);
      });
      recognition.addEventListener('end',function(){ // say comma after each location
        $('#pickuplocs').val(transcript);
      });
    });
      
    function pathRenderer(){
      locs = $('#pickuplocs').val().split(',');
      startloc = $('#startingpoint').val();
      calculateDistance(); //calculate distance between locations and map route accordingly.
    }

    function MapLoad() {                 //To initialize google maps
      directionsDisplay = new google.maps.DirectionsRenderer();
      let mapProp = {
        center: new google.maps.LatLng(28.7041,77.1025),//Placing the center of map to New Delhi
        zoom: 11,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        draggableCursor: 'move'
      };
      let map = new google.maps.Map(document.getElementById("googleMap"),mapProp);
      directionsDisplay.setMap(map);
    }

    function calculateDistance(){ //calculate distance between locations.
      let dms = new google.maps.DistanceMatrixService();
      dms.getDistanceMatrix(
        {
          origins: [startloc],
          destinations: locs,
          travelMode: google.maps.TravelMode.DRIVING,
          avoidHighways: false,
          avoidTolls: false
        },function(data, status){
          if(status != google.maps.DistanceMatrixStatus.OK)
            alert("Something went wrong :" + status);
          else{
            let routes = data.rows[0]
            sortedlocs = []
            for(i =routes.elements.length-1; i>=0; i--)
            {
              console.log(sortedlocs)
              let routeLength = routes.elements[i].distance.value;
              sortedlocs.push([locs[i],routeLength]);
            }
            let waypoints = [] //https://developers.google.com/maps/documentation/javascript/examples/directions-waypoints
            for(i=0;i<sortedlocs.length-1;i++)
            {
              waypoints.push({
                location: sortedlocs[i][0],
                stopover: true
              });
            }
            endloc = sortedlocs[sortedlocs.length-1][0];
            routeMapper(startloc,endloc,waypoints)
          }
        });           
    }

    function routeMapper(start,end,wp){ // Now Map points as per distance  ontained
      let directionsService = new google.maps.DirectionsService();
      let routeOptions = {
        origin: start,
        destination: end,
        waypoints: wp,
        optimizeWaypoints: true,
        travelMode: google.maps.TravelMode.DRIVING //car
      };

      directionsService.route(routeOptions, function(response, status) {

        if (status == google.maps.DirectionsStatus.OK) {
          directionsDisplay.setDirections(response);
          let route = response.routes[0];
          totalDistance = 0;
          for (i=0;i<route.legs.length;i++)
            totalDistance+=route.legs[i].distance.value;
          alert(" Total distance of trip : " +totalDistance/1000 + "Kms")
          
          ref = firebaseRef.ref('Routes');
          let data = {

          }
          ref.push({route: startloc+' > '+sortedlocs.map(x => x[0]).join('>'), tripDistance: `${totalDistance/1000}kms`});
          // ^ formatted sortedlocations string and pushed to firebase!
        }
      });
    }

    $('#showhistory').click(function(){
      ref = firebaseRef.ref('Routes');
      ref.on('value',gotData, errData);
      $('#poollog').slideDown();
    });

    function gotData(data){
      let routes = data.val();
      let keys = Object.keys(routes);
      keys.forEach(function(i) {
        $('ul').append('<li>'+ routes[i].route +':  '+routes[i].tripDistance +'</li>')
      });
    }
    function errData(data){
      console.log('some error');
    }
    google.maps.event.addDomListener(window, 'load', MapLoad);
    
    
